1. One to One (1:1)
Ciri-ciri:

Setiap data di tabel A hanya punya satu pasangan di tabel B, dan sebaliknya.

Biasanya untuk memisahkan data yang jarang digunakan atau sensitif.

Contoh:

Tabel users dan user_profiles (setiap user punya satu profile).

Cara tahu:

Jika satu baris di A hanya boleh punya satu pasang data di B → One to One.

✅ 2. One to Many (1:N)
Ciri-ciri:

Satu data di tabel A bisa punya banyak data di tabel B.

Tapi satu data di tabel B hanya punya satu data di tabel A.

Contoh:

Tabel kelas dan mahasiswa (satu kelas banyak mahasiswa, satu mahasiswa hanya satu kelas).

Cara tahu:

Jika satu baris di A bisa punya banyak baris di B → One to Many.

Biasanya ditandai dengan foreign key di tabel B (anak).

✅ 3. Many to Many (M:N)
Ciri-ciri:

Data di tabel A bisa terkait dengan banyak data di tabel B, dan sebaliknya.

Biasanya butuh tabel pivot atau tabel relasi.

Contoh:

Tabel siswa dan ekstrakurikuler → satu siswa ikut banyak ekstrakurikuler, satu ekstrakurikuler diikuti banyak siswa.

Perlu tabel siswa_ekstrakurikuler.

Cara tahu:

Jika kedua tabel saling bisa punya banyak data dari tabel lain → Many to Many.

🔍 Tips Menentukan Relasi:
Gunakan kalimat “Satu [A] bisa punya berapa [B]?” dan sebaliknya.

Lihat foreign key di database: apakah satu tabel mengacu ke tabel lain?

Perhatikan realitas datanya, bukan hanya strukturnya.

























✅ 1. INNER JOIN
Hanya ambil data yang cocok di kedua tabel.

Contoh:
Tabel siswa dan kelas:

siswa.id	nama_siswa	kelas_id
1	        Budi	      2
2	        Siti	      1

kelas.id	nama_kelas
1	        IPA
2	        IPS
3	        Bahasa

siswa kiri dan kelas kanan

nama_siswa	nama_kelas
Budi	IPS
Siti	IPA

Penjelasan: hanya siswa yang punya kelas_id yang cocok dengan kelas.id akan ditampilkan.

✅ 2. LEFT JOIN
Ambil semua data dari tabel kiri (siswa), dan data yang cocok dari tabel kanan (kelas). Jika tidak cocok, isi NULL.

Jika ada siswa yang kelas_id-nya tidak cocok, tetap tampil, tapi nama_kelas = NULL.

✅ 3. RIGHT JOIN
Kebalikan dari LEFT JOIN: Ambil semua data dari tabel kanan (kelas), dan data yang cocok dari tabel kiri (siswa).

Penjelasan: semua kelas ditampilkan. Jika tidak ada siswa di kelas itu, kolom siswa = NULL.

🧠 Rangkuman Singkat:
JOIN	        Tampilkan Baris Jika Cocok?	    Data Tidak Cocok?
INNER JOIN	  Ya, hanya yang cocok	          Tidak ditampilkan
LEFT JOIN	    Semua dari tabel kiri	          Tabel kanan → NULL
RIGHT JOIN	  Semua dari tabel kanan	        Tabel kiri → NULL
